{"version":3,"sources":["components/Home.js","components/About.js","components/NavBar.js","components/PageNotFound.js","App.js","serviceWorker.js","index.js"],"names":["Home","AboutUs","Navbar","Bar","styled","div","to","Error","loginUser","netlifyIdentity","currentUser","app_metadata","created_at","confirmed_at","email","id","user_metadata","localStorage","setItem","JSON","stringify","App","Main","useState","user","setUser","useEffect","init","getItem","parse","on","removeItem","onClick","open","NavBar","path","component","exact","About","PageNotFound","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+QAMeA,MAJf,WACE,OAAO,qCCGMC,MAJf,WACE,OAAO,yC,uQCoBMC,MAnBf,WACI,IAAMC,EAAMC,IAAOC,IAAV,KAST,OACI,kBAACF,EAAD,KACI,kBAAC,IAAD,CAAMG,GAAG,KAAT,SACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,aACA,kBAAC,IAAD,CAAMA,GAAG,SAAT,eCZGC,MAJf,WACE,OAAO,gD,sICgDF,SAASC,IACd,GAAIC,KAAmBA,IAAgBC,cAAe,CAAC,IAAD,EAGhDD,IAAgBC,cADlBC,EAFkD,EAElDA,aAAcC,EAFoC,EAEpCA,WAAYC,EAFwB,EAExBA,aAAcC,EAFU,EAEVA,MAAOC,EAFG,EAEHA,GAAIC,EAFD,EAECA,cAGrDC,aAAaC,QACX,wBACAC,KAAKC,UAAL,2BAAoBT,GAApB,IAAkCC,aAAYC,eAAcC,QAAOC,MAAOC,MASjEK,MA1Df,WAEE,IAAMC,EAAOlB,IAAOC,IAAV,KAFG,EAMWkB,mBAAS,MANpB,mBAMNC,EANM,KAMAC,EANA,KAyBb,OAjBAC,qBAAU,WAERjB,IAAgBkB,OAChB,IAAMH,EAAOP,aAAaW,QAAQ,yBAC9BJ,EACFC,EAAQ,CAAED,KAAML,KAAKU,MAAML,KAE3BhB,IAEFC,IAAgBqB,GAAG,SAAS,SAACN,GAAD,OAAUC,EAAQ,CAAED,QAAQhB,QACxDC,IAAgBqB,GAAG,UAAU,SAACN,GAAD,OAAUC,EAAQ,CAAED,KAAM,WAqCzDP,aAAac,WAAW,gCA7BtB,kBAACT,EAAD,KACE,8BAAOE,GACP,4BAAQQ,QAPZ,WACEvB,IAAgBwB,SAMd,uBACA,kBAACC,EAAD,MACA,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWpC,EAAMqC,OAAK,IACtC,kBAAC,IAAD,CAAOF,KAAK,SAASC,UAAWE,IAChC,kBAAC,IAAD,CAAOF,UAAWG,QChCRC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCNNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5f2f44a1.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nfunction Home() {\r\n  return <h1>Home</h1>\r\n}\r\n\r\nexport default Home\r\n","import React from \"react\"\r\n\r\nfunction AboutUs() {\r\n  return <h1>About Us</h1>\r\n}\r\n\r\nexport default AboutUs","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\"\r\n\r\nfunction Navbar() {\r\n    const Bar = styled.div`\r\n        width:10em;\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: flex-start;\r\n        justify-content: space-between;\r\n        flex: 1;\r\n      `\r\n\r\n    return (\r\n        <Bar>\r\n            <Link to=\"/\">Home </Link>\r\n            <Link to=\"/about\">About Us </Link>\r\n            <Link to=\"/shop\">Shop Now </Link>\r\n        </Bar>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from \"react\"\r\n\r\nfunction Error() {\r\n  return <h1>Page not found!</h1>\r\n};\r\n\r\nexport default Error\r\n","import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport Home from './components/Home';\r\nimport About from './components/About';\r\nimport NavBar from './components/NavBar';\r\nimport PageNotFound from './components/PageNotFound';\r\nimport { Route, Switch } from \"react-router-dom\"\r\nimport styled from \"styled-components\"\r\nimport netlifyIdentity from 'netlify-identity-widget'\r\n\r\nfunction App() {\r\n\r\n  const Main = styled.div`\r\n  display: flex;\r\n  align-items: center;`\r\n\r\n  const [user, setUser] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Update the document title using the browser API\r\n    netlifyIdentity.init();\r\n    const user = localStorage.getItem(\"currentOpenSaucedUser\");\r\n    if (user) {\r\n      setUser({ user: JSON.parse(user) });\r\n    } else {\r\n      loginUser();\r\n    }\r\n    netlifyIdentity.on(\"login\", (user) => setUser({ user }, loginUser()));\r\n    netlifyIdentity.on(\"logout\", (user) => setUser({ user: null }, logoutUser()));\r\n  });\r\n\r\n  function handleLogIn() {\r\n    netlifyIdentity.open();\r\n  }\r\n\r\n  return (\r\n    <Main>\r\n      <span>{user}</span>\r\n      <button onClick={handleLogIn} >Log in with netlify</button>\r\n      <NavBar />\r\n      <div>\r\n        <Switch>\r\n          <Route path=\"/\" component={Home} exact />\r\n          <Route path=\"/about\" component={About} />\r\n          <Route component={PageNotFound} />\r\n        </Switch>\r\n      </div>\r\n    </Main>\r\n  );\r\n}\r\n\r\nexport function loginUser() {\r\n  if (netlifyIdentity && netlifyIdentity.currentUser()) {\r\n    const {\r\n      app_metadata, created_at, confirmed_at, email, id, user_metadata\r\n    } = netlifyIdentity.currentUser();\r\n\r\n    localStorage.setItem(\r\n      \"currentOpenSaucedUser\",\r\n      JSON.stringify({ ...app_metadata, created_at, confirmed_at, email, id, ...user_metadata })\r\n    );\r\n  }\r\n}\r\n\r\nexport function logoutUser() {\r\n  localStorage.removeItem(\"currentOpenSaucedUser\");\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport React, { Component } from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport Home from './components/Home';\r\nimport About from './components/About';\r\nimport NavBar from './components/NavBar';\r\nimport PageNotFound from './components/PageNotFound';\r\nimport { Route, Switch } from \"react-router-dom\"\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}